diff --git a/src/Charts/BarChart.js b/src/Charts/BarChart.js
index c0faed4..04bb84f 100644
--- a/src/Charts/BarChart.js
+++ b/src/Charts/BarChart.js
@@ -1,6 +1,4 @@
 import React, { Component } from 'react';
-import { withRouter } from 'react-router-dom';
-
 import initializeChart from './BaseChart';
 import * as d3 from 'd3';
 import PropTypes from 'prop-types';
@@ -231,4 +229,4 @@ BarChart.propTypes = {
     history: PropTypes.object
 };
 
-export default initializeChart(withRouter(BarChart));
+export default initializeChart(BarChart);
diff --git a/src/Charts/LineChart.js b/src/Charts/LineChart.js
index e5ac8e3..4689cae 100644
--- a/src/Charts/LineChart.js
+++ b/src/Charts/LineChart.js
@@ -1,5 +1,4 @@
 import React, { Component } from 'react';
-import { withRouter } from 'react-router-dom';
 import initializeChart from './BaseChart';
 import PropTypes from 'prop-types';
 import Tooltip from '../Utilities/Tooltip';
@@ -339,4 +338,4 @@ LineChart.propTypes = {
     history: PropTypes.object
 };
 
-export default initializeChart(withRouter(LineChart));
+export default initializeChart(LineChart);
diff --git a/src/Containers/Clusters/Clusters.js b/src/Containers/Clusters/Clusters.js
index ca4e2a6..175c7ca 100644
--- a/src/Containers/Clusters/Clusters.js
+++ b/src/Containers/Clusters/Clusters.js
@@ -22,12 +22,6 @@ import {
 } from '@redhat-cloud-services/frontend-components';
 import { notAuthorizedParams } from '../../Utilities/constants';
 
-import { Router } from 'react-router-dom';
-import { createMemoryHistory } from 'history';
-const history = createMemoryHistory({
-    initialEntries: [ '/clusters' ]
-});
-
 import {
     Card,
     CardBody,
@@ -197,57 +191,55 @@ const Clusters = () => {
                 </Main>
             )}
             {!preflightError && !error && (
-                <Router history={history}>
-                    <Main>
-                        <Card>
-                            <PFCardTitle>
-                                <h2>Job status</h2>
-                            </PFCardTitle>
-                            <CardBody>
-                                {isLoading && <LoadingState />}
-                                {queryParams.cluster_id.length <= 0 && isSuccess && (
-                                    <BarChart
-                                        margin={{ top: 20, right: 20, bottom: 50, left: 70 }}
-                                        id="d3-bar-chart-root"
-                                        data={chartData}
-                                        templateId={queryParams.template_id}
-                                        orgId={queryParams.org_id}
-                                    />
-                                )}
-                                {queryParams.cluster_id.length > 0 && isSuccess && (
-                                    <LineChart
-                                        margin={{ top: 20, right: 20, bottom: 50, left: 70 }}
-                                        id="d3-line-chart-root"
-                                        data={chartData}
-                                        clusterId={queryParams.cluster_id}
-                                        templateId={queryParams.template_id}
-                                        orgId={queryParams.org_id}
-                                    />
-                                )}
-                            </CardBody>
-                        </Card>
-                        <div
-                            className="dataCard"
-                            style={{ display: 'flex', marginTop: '20px' }}
-                        >
-                            <TemplatesList
-                                qp={queryParams}
-                                templates={workflows}
-                                isLoading={isLoading}
-                                title={'Top workflows'}
-                                jobType={'workflowjob'}
-                            />
-                            <TemplatesList
-                                qp={queryParams}
-                                templates={templates}
-                                isLoading={isLoading}
-                                title={'Top templates'}
-                                jobType={'job'}
-                            />
-                            <ModulesList modules={modules} isLoading={isLoading} />
-                        </div>
-                    </Main>
-                </Router>
+                <Main>
+                    <Card>
+                        <PFCardTitle>
+                            <h2>Job status</h2>
+                        </PFCardTitle>
+                        <CardBody>
+                            {isLoading && <LoadingState />}
+                            {queryParams.cluster_id.length <= 0 && isSuccess && (
+                                <BarChart
+                                    margin={{ top: 20, right: 20, bottom: 50, left: 70 }}
+                                    id="d3-bar-chart-root"
+                                    data={chartData}
+                                    templateId={queryParams.template_id}
+                                    orgId={queryParams.org_id}
+                                />
+                            )}
+                            {queryParams.cluster_id.length > 0 && isSuccess && (
+                                <LineChart
+                                    margin={{ top: 20, right: 20, bottom: 50, left: 70 }}
+                                    id="d3-line-chart-root"
+                                    data={chartData}
+                                    clusterId={queryParams.cluster_id}
+                                    templateId={queryParams.template_id}
+                                    orgId={queryParams.org_id}
+                                />
+                            )}
+                        </CardBody>
+                    </Card>
+                    <div
+                        className="dataCard"
+                        style={{ display: 'flex', marginTop: '20px' }}
+                    >
+                        <TemplatesList
+                            qp={queryParams}
+                            templates={workflows}
+                            isLoading={isLoading}
+                            title={'Top workflows'}
+                            jobType={'workflowjob'}
+                        />
+                        <TemplatesList
+                            qp={queryParams}
+                            templates={templates}
+                            isLoading={isLoading}
+                            title={'Top templates'}
+                            jobType={'job'}
+                        />
+                        <ModulesList modules={modules} isLoading={isLoading} />
+                    </div>
+                </Main>
             )}
         </React.Fragment>
 
diff --git a/src/Containers/Clusters/Clusters.test.js b/src/Containers/Clusters/Clusters.test.js
index a5decfd..fa5f3fc 100644
--- a/src/Containers/Clusters/Clusters.test.js
+++ b/src/Containers/Clusters/Clusters.test.js
@@ -1,89 +1,46 @@
-import * as React from 'react';
 import { act } from 'react-dom/test-utils';
-import { render, screen } from '@testing-library/react';
-import { Provider } from 'react-redux';
-import configureStore from 'redux-mock-store';
+import { screen } from '@testing-library/react';
+import { renderPage } from '../../Utilities/tests/helpers.reactTestingLib';
 
 import Clusters from './Clusters';
 
-const clustersUrl = 'path:/api/tower-analytics/v1/job_explorer/';
-const dummyData = {
-    url: clustersUrl,
-    data: [{
-        cluster_id: 1,
-        install_uuid: 'bb7abc1e-fc12-4d7b-a61a-19715539eea1',
-        label: '10.10.14.195'
-    }],
-    response: { msg: 'Success' }
-};
+import mockResponses from '../../Utilities/__fixtures__/';
+import * as api from '../../Api';
+jest.mock('../../Api');
 
 describe('<Clusters />', () => {
-    let mockStore;
-    let store;
-
     beforeEach(() => {
-        mockStore = configureStore();
-        store = mockStore({ initialState: {}});
-    });
-
-    afterEach(() => {
-        global.fetch.mockClear();
-        delete global.fetch;
+        api.preflightRequest.mockResolvedValue(mockResponses.preflightRequest200);
+        api.readClustersOptions.mockResolvedValue(mockResponses.readClusterOptions);
+        api.readJobExplorer.mockResolvedValue(mockResponses.readJobExplorer);
+        api.readEventExplorer.mockResolvedValue(mockResponses.readEventExplorer);
     });
 
     test('has rendered preflight/authorization error component', async () => {
-        await act(async () => {
-            global.fetch = jest.fn().mockImplementation(() =>
-                Promise.resolve({
-                    status: 401,
-                    json: () => Promise.resolve(dummyData)
-                })
-            );
-            render(<Provider store={store}><Clusters />)</Provider>);
-        });
+        api.preflightRequest.mockRejectedValue(mockResponses.preflightRequest401);
+        await act(async () => { renderPage(Clusters); });
         expect(screen.getAllByText(/Clusters/i));
         expect(screen.getByText('Not authorized'));
     });
 
     test('has rendered Empty page component', async () => {
-        await act(async () => {
-            global.fetch = jest.fn().mockImplementation(() =>
-                Promise.resolve({
-                    json: () => Promise.resolve(dummyData)
-                })
-            );
-            render(<Provider store={store}><Clusters />)</Provider>);
-        });
+        api.preflightRequest.mockRejectedValue(mockResponses.preflightRequest404);
+        await act(async () => { renderPage(Clusters); });
         expect(screen.getAllByText(/Clusters/i));
         expect(screen.getByText('Something went wrong, please try reloading the page'));
     });
 
     test('has rendered RBAC Access error component', async () => {
-        await act(async () => {
-            global.fetch = jest.fn().mockImplementation(() =>
-                Promise.resolve({
-                    status: 403,
-                    json: () => Promise.resolve(dummyData)
-                })
-            );
-            render(<Provider store={store}><Clusters />)</Provider>);
-        });
+        api.preflightRequest.mockRejectedValue(mockResponses.preflightRequest403);
+        await act(async () => { renderPage(Clusters); });
         expect(screen.queryByText(/Clusters/i)).toBeNull();
         expect(screen.getByText('RBAC Access Denied'));
     });
 
     test('has rendered Clusters component with data', async () => {
-        await act(async () => {
-            global.fetch = jest.fn().mockImplementation(() =>
-                Promise.resolve({
-                    ok: true,
-                    json: () => Promise.resolve(dummyData)
-                })
-            );
-            render(<Provider store={store}><Clusters />)</Provider>);
-        });
+        await act(async () => { renderPage(Clusters); });
         expect(screen.getAllByText(/Clusters/i));
-        expect(screen.getByText('Jobs across all clusters'));
+        expect(screen.getByText('Top workflows'));
         expect(screen.getByText('Job status'));
     });
 });
